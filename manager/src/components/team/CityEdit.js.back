import React, { Component } from 'react';
import $ from '../../common/XDomainJquery';
import { Form, Input, Modal, Button, Select, message, Icon } from 'antd';
import API_URL from '../../common/url';

const FormItem = Form.Item;
const Option = Select.Option;

/**
 * 搜索企业用户
 */

let timeout;
let currentValue;

function fetch(value, callback) {
    if (timeout) {
        clearTimeout(timeout);
        timeout = null;
    }
    currentValue = value;

    function fake() {
        $.ajax({
            method: 'get',
            url: `${API_URL.investigation.queryUserByKey}?enterpriseId=1&key=${value}`,
        }).done(dt => {
            const d = dt.data;
            if (currentValue === value) {
                const result = d.userList;
                const data = [];
                result.forEach(r => {
                    data.push({
                        value: r.userCompellation,
                        text: r.userCompellation,
                    });
                });
                callback(data);
            }
        });
    }

    timeout = setTimeout(fake, 300);
}

class SearchInput extends React.Component {
    state = {
        data: [],
        value: '',
    };

    handleChange = value => {
        this.setState({ value });
        fetch(value, data => this.setState({ data }));
    }

    handleBlur = value => {
        this.props.setFieldsValue({ bdUsers: value });
    }

    render() {
        const options = this.state.data.map(d => <Option key={d.value}>{d.text}</Option>);
        return (
            <Select
                mode="combobox"
                value={this.state.value}
                placeholder={this.props.placeholder}
                notFoundContent=""
                style={this.props.style}
                defaultActiveFirstOption={false}
                showArrow={false}
                filterOption={false}
                onChange={this.handleChange}
                onBlur={this.handleBlur}
            >
                {options}
            </Select>
        );
    }
}


let uuid = 0;
class CreateForm extends Component {

    state = {
        bdValue: '',
        users:[],
        user:{},
        userDetail:{},
        provinceData:[],
        cityData:[],
        city:'',
        cityId:0,
    };

    setFieldsValue = obj => {
        this.props.form.setFieldsValue(obj);
    }
    /**
     * 获取员工领导列表信息
     * @param id
     */
    loadUserManagerData = () => {
        $.ajax({
            method: 'get',
            url: `${API_URL.team.querymanager}?enterpriseId=1`,
        }).done(data => {
            this.setState({
                users: data.datas,
            });
        });
    }

    /**
     * 获取员工领导个人信息
     * @param id
     */
    loadUserData = id => {
        $.ajax({
            method: 'get',
            url: `${API_URL.team.queryuser}?enterpriseId=1&userId=${id}`,
        }).done(data => {
            this.setState({
                user: data.user,
                userDetail:data.user.userDetail
            });
        });
    }

    handleChangeSelect = value => {

        console.log(`selected ${value}`);
        this.loadUserData(value)
    }

    

//得到城市列表
getCity = ( parentId = 0 )=>{
        $.ajax({
            method: 'GET',
            url:`${API_URL.common.arealist}?parentId=${parentId}`,
        }).done( data => {
            if(parentId == 0 ){
                this.setState({
                    provinceData: data.datas,
                });
            }else{
                this.setState({
                    cityData: data.datas,
                },()=>{
                    const city = this.state.cityData.map(city => city.regionName);
                    this.setState({
                        city: city,
                    });
                });
            }
            
        });
    }

    handleProvinceChange = (value) => {
        this.getCity(value)        
    }
    handleCityChange = (value) => {
        this.setState({
            cityId: value,
            city:value,
        });        
    }



//动态增加 区域选择框

remove = (k) => {
    const { form } = this.props;
    // can use data-binding to get
    const keys = form.getFieldValue('keys');
    // We need at least one passenger
    if (keys.length === 1) {
      return;
    }

    // can use data-binding to set
    form.setFieldsValue({
      keys: keys.filter(key => key !== k),
    });
  }

  add = () => {
    uuid++;
    const { form } = this.props;
    // can use data-binding to get
    const keys = form.getFieldValue('keys');
    const nextKeys = keys.concat(uuid);
    // can use data-binding to set
    // important! notify form to detect changes
    form.setFieldsValue({
      keys: nextKeys,
    });
  }


componentWillMount(){
        this.loadUserManagerData()
        this.getCity()
    }



    render() {
        const isEdit = this.props.isEdit
        const { getFieldDecorator, getFieldValue } = this.props.form;
            // const bdValue = getFieldValue('bdUsers');
        const options = this.state.users.map(d => <Option key={d.userId}>{d.userCompellation}</Option>);
        // const cityoptions = this.state.users.map(d => <Option key={d.userId}>{d.userCompellation}</Option>);
        const {cityName,positionName,leaderName,userCompellation,userId,enterpriseDepartmentName }= this.state.user
        const {employeeCode} = this.state.userDetail
        const provinceOptions = this.state.provinceData.map(province => <Option key={province.regionId}>{province.regionName}</Option>);
        const cityOptions = this.state.cityData.map(city => <Option key={city.regionId} >{city.regionName}</Option>);
        const formItemLayout = {
                labelCol: {
                    xs: { span: 24 },
                    sm: { span: 4 },
                },
                wrapperCol: {
                    xs: { span: 24 },
                    sm: { span: 20 },
                },
                };
                const formItemLayoutWithOutLabel = {
                wrapperCol: {
                    xs: { span: 24, offset: 0 },
                    sm: { span: 20, offset: 4 },
                },
            };
        getFieldDecorator('keys', { initialValue: [] });
        const keys = getFieldValue('keys');
        const formItems = keys.map((k, index) => {
            return (
            <div className="field-max" key={index}> 
                <FormItem
                {...formItemLayoutWithOutLabel}
                label={'城市'+ (index+1)}
                required={false}
                key={index}
                >
                {getFieldDecorator(`ids[${k}]`, {
                    validateTrigger: ['onChange', 'onBlur'],
                    rules: [{
                    required: true,
                    whitespace: true,
                    message: "不能为空 - 请选择",
                    }],
                })(
                    <Select style={{ width: 80 }} onChange={this.handleProvinceChange}>
                        {provinceOptions}
                    </Select>
                )}
                {keys.length > 1 ? (
                    <Icon
                    className="dynamic-delete-button"
                    type="minus-circle-o"
                    disabled={keys.length === 1}
                    onClick={() => this.remove(k)}
                    />
                ) : null}
                </FormItem>
            </div>
            );
        });
        if(!isEdit){
            return (
            <div className="create-form">
                <Form>
                    <div className="field-max">
                        <FormItem label="选择员工">
                            {

                                getFieldDecorator('userId',{
                                    initialValue:"请选择",
                                })(
                                    <Select onChange={this.handleChangeSelect} style={{width:120}}>
                                        {options}
                                    </Select>
                                    )
                            }
                        </FormItem>                        
                    </div>
                    <div className="field-max">
                        <FormItem label="工号">

                            {
                                getFieldDecorator('employeeCode')(<Input placeholder={employeeCode} disabled />)
                            }
                        </FormItem>
                    </div>
                    <div className="field-max">
                        <FormItem label="姓名">

                            {
                                getFieldDecorator('userCompellation')(<Input placeholder={userCompellation} disabled />)
                            }
                        </FormItem>
                    </div>
                    <div className="field-max">
                        <FormItem label="职位">

                            {
                                getFieldDecorator('positionName')(<Input placeholder={positionName} disabled />)
                            }
                        </FormItem>
                    </div>
                    <div className="field-max">
                        <FormItem label="主管领导">
                            {
                                getFieldDecorator('leaderName')(<Input placeholder={leaderName} disabled />)
                            }
                        </FormItem>
                    </div>
                    <div className="field-max">
                        <FormItem label="部门">
                            {
                                getFieldDecorator('enterpriseDepartmentName')(<Input placeholder={enterpriseDepartmentName} disabled />)
                            }
                        </FormItem>
                    </div>
                    <div className="field-max">
                        <FormItem label="工作地点">
                            {
                                getFieldDecorator('cityName')(<Input placeholder={cityName} disabled />)
                            }
                        </FormItem>
                    </div>
                    <div className="field-max">                     
                        <FormItem {...formItemLayoutWithOutLabel} label="分管城市">
                        {
                            getFieldDecorator('xxx', {
                                    rules: [
                                        
                                    ],
                                })(
                                    <Button type="dashed" onClick={this.add} style={{ width: '60%' }}>
                                        <Icon type="plus" /> 添加城市
                                    </Button>
                                  )
                        }                            
                        </FormItem>                        
                    </div>
                    {formItems}
                </Form>
            </div>
        );

        }else{           
            return (
                <div className="create-form">
                    <Form>
                        <div className="field-max">
                            <FormItem label="工号">
                                {
                                    getFieldDecorator('employeeCode')(<Input disabled/>)
                                }
                            </FormItem>
                        </div>
                        <div className="field-max">
                            <FormItem label="姓名">
                                {
                                    getFieldDecorator('userCompellation')(<Input disabled />)
                                }
                            </FormItem>
                        </div>                        
                        <div className="field-max">                     
                            <FormItem {...formItemLayoutWithOutLabel} label="分管城市">
                            {
                                getFieldDecorator('xxx', {
                                        rules: [
                                            
                                        ],
                                    })(
                                        <Button type="dashed" onClick={this.add} style={{ width: '60%' }}>
                                            <Icon type="plus" /> 添加城市
                                        </Button>
                                    )
                            }                            
                            </FormItem>                        
                        </div>
                        {formItems}
                    </Form>
                </div>
            );
        }
        
    }
}

class CreateModal extends Component {

    state = {
        visible: false,
        confirmLoading: false,
        investigation: {},
        regions:[],
        isEdit: false,
        id:0,
    };

    show = id => {
        this.setState({
            visible: true,
            isEdit: false,
            investigation: {},
        });
        if (id) {
            this.loadData(id);
            this.setState({
                isEdit: true,
                id:id,
            });
        }
    };

    hide = () => {
        this.setState({
            visible: false,
        });
    };

    /**
     * 获取项目详细信息
     * @param id
     */
    loadData = id => {
        $.ajax({
            method: 'get',
            url: `${API_URL.team.citylist}?userId=${id}&enterpriseId=1`,
        }).done(data => {
            this.setState({
                investigation: data.user,
                regions:data.user.regions,
            });
        });
    }

    // 提交表单
    handleSubmit = () => {
        this.refs.form.validateFieldsAndScroll((errors, values) => {
            if (errors) {
                return;
            }
            this.setState({ confirmLoading: true });
            const fieldsValue = this.refs.form.getFieldsValue();            
            if (this.state.isEdit) {
               fieldsValue.userId = this.state.id;
                // 修改
                $.ajax({
                    method: 'POST',
                    url: API_URL.team.update,
                    data: fieldsValue,
                }).done(data => {
                    this.setState({ confirmLoading: false });
                    if(data.success){
                        message.success(data.success);
                        this.props.reload();
                        this.hide();
                    }else{
                        message.warn(data.error);
                        this.props.reload();
                        this.hide();
                    }                    
                });
            } else {
                // 新建
                fieldsValue.enterpriseId = 1;
                $.ajax({
                    method: 'POST',
                    url: API_URL.team.create,
                    data: fieldsValue,
                }).done(data => {
                    this.setState({ confirmLoading: false });
                    if(data.success){
                        message.success(data.success);
                        this.props.reload();
                        this.hide();
                    }else{
                        message.warn(data.error);
                        this.props.reload();
                        this.hide();
                    } 
                });
            }
        });
    }

    render() {
        const { confirmLoading, visible, investigation, isEdit } = this.state;
        const mapPropsToFields = () => ({
            employeeCode: { value: investigation.employeeCode },
            userCompellation: { value: investigation.userCompellation },
            // employeeCode: { value: investigation.employeeCode },
        });
        CreateForm = Form.create({ mapPropsToFields })(CreateForm);
        return (
            <Modal
                title={isEdit ? '修改分管城市记录' : '添加分管城市记录'}
                visible={visible}
                onOk={this.handleSubmit}
                onCancel={this.hide}
                className="create-modal"
                wrapClassName="vertical-center-modal"
                width="450px"
                confirmLoading={confirmLoading}
            >
                <CreateForm ref="form" isEdit={this.state.isEdit} />
            </Modal>

        );
    }
}

export default CreateModal;
